// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id        Int     @id @default(autoincrement())
  title     String
  upload    String 
  createdAt DateTime @default(now())
}

enum UserTier {
  BRONZE    // <= 5 
  SILVER    // 6-20
  GOLD      // > 20
}

model User {
  id          String              @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  phoneNumber String?   @map("phone_number")
  address     String?
  isAdmin     Boolean   @default(false) @map("is_admin")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  userTier      UserTier      @default(BRONZE) 
  tokens      Token[]
  reviews     Review[]
  orders      Order[]
  bookings    Booking[]
  couponTargets CouponTarget[]
}

model Token {
  id          String              @id @default(uuid())
  refreshToken String @unique
  accessToken String?
  deviceInfo   String?
  createdAt   DateTime  @default(now()) @map("created_at")
  expiresAt   DateTime  @map("expires_at")
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  @@index([userId, expiresAt])
}

model Category {
  id          String              @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  products    Product[]
}

model Product {
  id          String              @id @default(uuid())
  name        String
  description String?
  price       Float
  categoryId  String?      @map("category_id")
  imageUrl    String?   @map("image_url")
  stock       Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  category    Category? @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
}

model Order {
  id          String              @id @default(uuid())
  userId      String
  status      OrderStatus @default(pending)
  totalPrice  Float
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  user        User       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payments    Payment[]
  deliveries  Delivery[]
  @@index([userId, status])
}

model OrderItem {
  id          String              @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Float
  createdAt   DateTime  @default(now()) @map("created_at")
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product?  @relation(fields: [productId], references: [id])
  @@index([orderId, productId])
}

model Payment {
  id          String              @id @default(uuid())
  orderId       String
  paymentMethod String?
  paymentStatus PaymentStatus @default(pending)
  amount        Float
  createdAt     DateTime   @default(now()) @map("created_at")
  order         Order      @relation(fields: [orderId], references: [id])
  @@index([orderId])
}

model Delivery {
  id          String              @id @default(uuid())
  orderId               String
  deliveryAddress       String    @map("delivery_address")
  deliveryStatus        DeliveryStatus @default(preparing)
  estimatedDeliveryTime DateTime? @map("estimated_delivery_time")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @map("updated_at")
  order                 Order     @relation(fields: [orderId], references: [id])
  @@index([orderId, deliveryStatus])
}

model Review {
  id          String              @id @default(uuid())
  userId      String
  productId   String
  rating      Int       
  comment     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  @@index([userId, productId])
}
model Booking {
  id          String              @id @default(uuid())
  userId            String
  serviceId         String
  eventDate         DateTime      @map("event_date")
  timeSlot          String        @map("time_slot") 
  numberOfGuests    Int           @map("number_of_guests")
  specialRequest    String?       @map("special_request")
  status            BookingStatus @default(pending)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @map("updated_at")

  user              User          @relation(fields: [userId], references: [id])
  service           Service       @relation(fields: [serviceId], references: [id])
  @@index([userId, status])
}

model Service {
  id          String              @id @default(uuid())
  name        String
  description String?
  price       Float
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  bookings    Booking[]
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum DeliveryStatus {
  preparing
  shipped
  delivered
  cancelled
}

enum DiscountType {
  percentage
  fixed
}

model Coupon {
  id                String              @id @default(uuid())
  code              String     @unique
  discountType      DiscountType
  discountValue     Float
  minOrderValue     Float?
  maxDiscountValue  Float?
  isActive          Boolean    @default(true) @map("is_active")
  expiresAt         DateTime?  @map("expires_at")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @default(now()) @map("updated_at")
  couponTargets     CouponTarget[] 
}

model CouponTarget {
  id          String              @id @default(uuid())
  couponId       String
  userId         String?      
  userTier       UserTier? 
  sentAt         DateTime? 
  expiresAt      DateTime? 
  coupon         Coupon    @relation(fields: [couponId], references: [id])
  user           User?     @relation(fields: [userId], references: [id]) 
  @@index([couponId, userId, userTier])
}