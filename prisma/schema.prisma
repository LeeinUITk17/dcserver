generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  address   String?
  role      Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  staff     Staff?
  orders    Order[]
  tokens    Token[]
  couponTargets CouponTarget[]
}

enum Role {
  STAFF
  ADMIN
}

model Staff {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  position  String
  salary    Decimal
  user      User    @relation(fields: [userId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  sku         String   @unique
  name        String
  categoryId  Int
  brandId     Int
  price       Decimal
  stock       Int
  minStockLevel Int    @default(5)
  status      ProductStatus @default(ACTIVE)
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [id])
  brand       Brand    @relation(fields: [brandId], references: [id])
  orderItems  OrderItem[]
  inventories Inventory[]
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  products Product[]
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @unique
  products Product[]
}

model Order {
  id             Int      @id @default(autoincrement())
  userId         Int
  receiverName   String
  receiverPhone  String
  receiverAddress String
  orderDate      DateTime @default(now())
  totalAmount    Decimal
  status         OrderStatus @default(PENDING)
  couponId       Int?
  user           User  @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  delivery       Delivery?
  payment        Payment?
  coupon         Coupon? @relation(fields: [couponId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  FAILED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Shelf {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  inventories Inventory[]
}

model Inventory {
  id        Int @id @default(autoincrement())
  shelfId   Int
  productId Int
  quantity  Int
  shelf     Shelf   @relation(fields: [shelfId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Delivery {
  id           Int      @id @default(autoincrement())
  orderId      Int      @unique
  deliveryDate DateTime?
  status       DeliveryStatus @default(PENDING)
  carrier      String
  trackingCode String?
  order        Order @relation(fields: [orderId], references: [id])
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
}

model Payment {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  paymentDate DateTime @default(now())
  amount      Decimal
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  order       Order @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Coupon {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  discountType    String
  discountValue   Float
  minOrderValue   Float
  maxDiscountValue Float
  usageLimit      Int?
  isActive        Boolean @default(true)
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
  couponTargets   CouponTarget[]
}

model CouponTarget {
  id        Int      @id @default(autoincrement())
  couponId  Int
  userId    Int?
  userTier  String?
  sentAt    DateTime?
  expiresAt DateTime
  coupon    Coupon @relation(fields: [couponId], references: [id])
  user      User?  @relation(fields: [userId], references: [id])
}

model Token {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}
