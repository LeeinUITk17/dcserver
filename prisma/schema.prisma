generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  password  String   
  email     String   @unique
  phone     String   @unique
  address   String?
  isAdmin   Boolean  @default(false)
  isEmployee   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userTier  UserTier?     @default(BRONZE)
  point     Int           @default(0)
  employee   Employee?
  orders     Order[]
  tokens     Token[]
  reservations Reservation[]
  couponTargets CouponTarget[]
  reviews    Review[]  @relation("UserReviews")
  couponUsages CouponUsage[]
  isDeleted   Boolean @default(false)
}

model Employee {
  id        String      @id @default(uuid())
  userId    String      @unique
  salary           Decimal?  // Dành cho Full-time
  hourlyRate       Decimal?  // Dành cho Part-time
  hireDate  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  workSchedules WorkSchedule[]  @relation("EmployeeWorkSchedules")
  leaveRequests LeaveRequest[]  @relation("EmployeeLeaveRequests")
  attendances Attendance[] @relation("EmployeeAttendance")
  overtimeRequests OvertimeRequest[]  @relation("EmployeeOvertimeRequests")
  payrolls Payroll[]  @relation("EmployeePayrolls")
  role             Role
  employmentType   EmploymentType @default(FULL_TIME)
  employmentStatus EmploymentStatus @default(ACTIVE)
  isDeleted   Boolean @default(false)
}

model WorkSchedule {
  id         String   @id @default(uuid())
  employee   Employee @relation("EmployeeWorkSchedules", fields: [employeeId], references: [id])
  employeeId String
  shiftTemplateId String  // Liên kết với ca mẫu
  shiftTemplate   ShiftTemplate @relation("ShiftTemplateWorkSchedules", fields: [shiftTemplateId], references: [id])
  shiftStart DateTime
  shiftEnd   DateTime
  createdAt  DateTime @default(now())
  isDeleted  Boolean  @default(false)
}

model ShiftTemplate {
  id         String   @id @default(uuid())
  name       String   @unique  // Tên ca: "Ca Sáng", "Ca Chiều"
  shiftType  ShiftType
  startTime  String
  endTime    String
  workSchedules WorkSchedule[] @relation("ShiftTemplateWorkSchedules")
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model LeaveRequest {
  id          String   @id @default(uuid())
  employeeId  String
  employee    Employee @relation("EmployeeLeaveRequests", fields: [employeeId], references: [id])
  requestDate DateTime @default(now())
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      LeaveStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
}

model Attendance {
  id                    String   @id @default(uuid())
  employee              Employee @relation("EmployeeAttendance", fields: [employeeId], references: [id])
  employeeId            String
  workDate              DateTime
  checkIn               DateTime
  checkOut              DateTime?
  notes                 String?
  overtimeMinutes       Int?
  lateMinutes           Int?
  earlyDepartureMinutes Int?
  createdAt             DateTime @default(now())
  isDeleted             Boolean  @default(false)
}

enum OvertimeStatus {
  PENDING
  APPROVED
  REJECTED
}

model OvertimeRequest {
  id               String   @id @default(uuid())
  employeeId       String
  employee         Employee @relation("EmployeeOvertimeRequests", fields: [employeeId], references: [id])
  date             DateTime
  requestedMinutes Int
  reason           String?
  status           OvertimeStatus @default(PENDING)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDeleted        Boolean  @default(false)
}

model Payroll {
  id          String   @id @default(uuid())
  employeeId  String
  employee    Employee @relation("EmployeePayrolls", fields: [employeeId], references: [id])
  baseSalary  Decimal? // Chỉ áp dụng cho Full-time
  hourlyRate  Decimal? // Chỉ áp dụng cho Part-time
  workedHours Int?     // Chỉ có nếu là nhân viên Part-time
  standardHours Int?
  overtimePay Decimal @default(0)
  deductions  Decimal @default(0)
  netSalary   Decimal
  createdAt   DateTime @default(now())
}

enum EmploymentStatus {
  ACTIVE
  RESIGNED
  TERMINATED
  ON_LEAVE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
}

enum Role {
  MANAGER
  CASHIER
  COOK
  WAITER
  DELIVERY
}

enum ShiftType {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}

model Table {
  id        String      @id @default(uuid())
  number    String      @unique
  capacity  Int
  status    TableStatus @default(AVAILABLE)
  orders      Order[]
  isDeleted   Boolean @default(false)
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Reservation {
  id              String      @id @default(uuid())
  userId          String
  reservationTime DateTime
  status          ReservationStatus @default(PENDING)
  orderId         String? @unique
  user            User   @relation(fields: [userId], references: [id])
  order           Order?  @relation(name: "OrderReservation", fields: [orderId], references: [id])
  isDeleted       Boolean @default(false)
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model MenuCategory {
  id   String    @id @default(uuid())
  name String @unique
  menuItems MenuItem[]
  isDeleted   Boolean @default(false)
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  categoryId  String
  isAvailable Boolean  @default(true)
  
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  recipeIngredients RecipeIngredient[]
  isDeleted   Boolean @default(false)
}

model Order {
  id             String     @id @default(uuid())
  userId         String?
  tableId        String?
  reservationId  String? @unique
  orderType      OrderType
  orderDate      DateTime @default(now())
  totalAmount    Decimal
  shippingFee    Decimal
  taxAmount      Decimal
  status         OrderStatus @default(PENDING)
  couponId       String?
  earnedPoint    Int      @default(0)
  user           User?  @relation(fields: [userId], references: [id])
  table          Table? @relation(fields: [tableId], references: [id])
  reservation    Reservation? @relation(name: "OrderReservation")
  orderItems     OrderItem[]
  delivery       Delivery?
  payment        Payment?
  coupon         Coupon? @relation(fields: [couponId], references: [id])
  reviews        Review[]  @relation("OrderReviews")
  isDeleted      Boolean @default(false)
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum OrderStatus {
  PENDING
  PROCESSING
  SERVED
  DELIVERED
  CANCELLED
  RETURNED
  FAILED
}

model OrderItem {
  id        String      @id @default(uuid())
  orderId   String
  menuItemId String
  quantity  Int
  price     Decimal
  
  order      Order    @relation(fields: [orderId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Review {
  id         String       @id @default(uuid())
  userId     String
  orderId    String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  user       User      @relation("UserReviews", fields: [userId], references: [id])
  order      Order  @relation("OrderReviews", fields: [orderId], references: [id])
}

enum InventoryCategory {
  MEAT
  VEGETABLE
  SPICE
  DAIRY
  BEVERAGE
}

model InventoryItem {
  id          String       @id @default(uuid())
  name        String
  category    InventoryCategory
  quantity    Int
  unit        String
  supplierId  String?
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean @default(false)
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  recipeIngredients RecipeIngredient[]
  transactions InventoryTransaction[]
}

model RecipeIngredient {
  id            String     @id @default(uuid())
  menuItemId    String
  inventoryItemId String
  quantity      Int
  unit          String
  isDeleted   Boolean @default(false)  
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id])
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
}

model InventoryTransaction {
  id             String      @id @default(uuid())
  inventoryItemId String
  transactionType TransactionType
  quantity       Int
  price         Decimal  // Giá của từng lần nhập/xuất kho
  timestamp      DateTime @default(now())
  inventoryItem  InventoryItem @relation(fields: [inventoryItemId], references: [id])
}

enum TransactionType {
  IMPORT
  EXPORT
}

model Supplier {
  id        String     @id @default(uuid())
  name      String
  contact   String
  address   String?
  inventoryItems InventoryItem[]
  isDeleted   Boolean @default(false)
}

model Setting {
  id      String      @id @default(uuid())
  key     String   @unique
  value   String
}

model Delivery {
  id           String      @id @default(uuid())
  orderId      String      @unique
  deliveryDate DateTime    @default(now())
  status       DeliveryStatus @default(PENDING)
  carrier      String
  trackingCode String?

  order        Order @relation(fields: [orderId], references: [id])
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
}

model Payment {
  id          String      @id @default(uuid())
  orderId     String      @unique
  paymentDate DateTime @default(now())
  amount      Decimal
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)

  order       Order @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model CouponPool {
  id           String       @id @default(uuid())
  name         String
  description  String?
  totalCoupons Int
  createdAt    DateTime  @default(now())
  campaignId   String?
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  allocatedCount  Int       @default(0)
  coupons      Coupon[]
  isDeleted   Boolean @default(false)
}

enum CouponStatus {
  AVAILABLE
  ALLOCATED
  EXPIRED
  USED
}

model Coupon {
  id                String      @id @default(uuid())
  code              String    @unique
  discountType      DiscountType
  discountValue     Decimal
  minOrderValue     Decimal
  maxDiscountValue  Decimal
  usageLimit        Int?      @default(1)
  status            CouponStatus @default(AVAILABLE)
  isActive          Boolean   @default(true)
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  campaignId        String?
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
  poolId            String
  pool              CouponPool @relation(fields: [poolId], references: [id])
  isDeleted   Boolean @default(false)
  orders            Order[]
  couponTargets     CouponTarget[]
  couponUsages      CouponUsage[]
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Campaign {
  id          String       @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  coupons     Coupon[]
  couponPools CouponPool[]
  isDeleted   Boolean @default(false)
  userTier    UserTier
}

model CouponTarget {
  id        String      @id @default(uuid())
  couponId  String
  userId    String?
  userTier  UserTier?
  sentAt    DateTime @default(now())
  expiresAt DateTime
  usageLimit  Int?       @default(1)
  coupon    Coupon @relation(fields: [couponId], references: [id])
  user      User?  @relation(fields: [userId], references: [id])
  isDeleted   Boolean @default(false)
}

enum UserTier {
  GOLD   
  SILVER
  BRONZE
}

model CouponUsage {
  id        String      @id @default(uuid())
  couponId  String
  userId    String
  usedAt    DateTime @default(now())

  coupon    Coupon @relation(fields: [couponId], references: [id])
  user      User   @relation(fields: [userId], references: [id])
}

model Token {
  id           String      @id @default(uuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id])
}